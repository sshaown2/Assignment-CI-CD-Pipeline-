name: Node.js CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger the workflow on pushes to the main branch

jobs:
  test:
    name: Test Application
    runs-on: self-hosted # ubuntu-latest # Run the test job on a GitHub-hosted runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # Action to checkout your repository code

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Specify the Node.js version to use (updated to 20)

      #- name: Install dependencies
      #  run: npm install # Install Node.js project dependencies

      - name: Run tests and capture results
        run: npm test

      - name: Upload test results artifact
        uses: actions/upload-artifact@v4
        with:
          name: test-result # Name of the artifact
          path: test-result.txt # Path to the file to upload

  deploy:
    name: Deploy to Self-Hosted Runner
    needs: test # This job depends on the 'test' job succeeding
    runs-on: self-hosted #[self-hosted, nodejs-runner]

    steps:
      - name: Download test results artifact
        uses: actions/download-artifact@v4
        with:
          name: test-result # Name of the artifact to download
          path: ./downloaded-artifacts # Directory where the artifact will be downloaded

      - name: Display downloaded test results
        run: cat ./downloaded-artifacts/test-result.txt # Display the content of the downloaded file

      - name: Checkout repository for deployment
        uses: actions/checkout@v4 # Checkout the code on the self-hosted runner

      - name: Set up Node.js on self-hosted runner
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Ensure Node.js is set up on the runner (updated to 20)

      #- name: Install dependencies for deployment
      #  run: npm install # Install dependencies on the self-hosted runner
        
      - name: Stop existing application
        shell: powershell
        run: |
          if (Get-Command pm2 -ErrorAction SilentlyContinue) {
            try {
              pm2 stop all
              pm2 delete all
            } catch {
              Write-Host "PM2 stop/delete failed: $_"
            }
          } else {
            Write-Host "PM2 not found. Manual stop/start might be needed."
            try {
              Stop-Process -Name "node" -Force -ErrorAction SilentlyContinue
            } catch {
              Write-Host "Node process stop failed: $_"
            }
          }


      - name: Start Node.js application with PM2       
        run: |
          #npm install -g pm2 # Install PM2 globally if not already installed
          pm2 start server.js --name "node-app" # Start the application using PM2
          pm2 save # Save PM2 process list to restart on boot
        
       